
// // const rawData = "2.358277	2.358277 5.442177	5.442177 6.167800	6.167800 6.893424	6.893424 7.800454	7.800454 8.480726	8.480726 10.113379	10.113379 10.839002	10.839002 11.564626	11.564626 14.648526	14.648526 16.145125	16.145125 17.687075	17.687075 18.866213	18.866213 20.181406	20.181406 21.043084	21.043084 22.448980	22.448980 24.531024	24.531024 24.610693	24.610693 24.848485	24.848485 24.928154	24.928154 25.211296	25.211296 25.290965	25.290965 25.574108	25.574108 25.800866	25.800866 25.982271	25.982271 26.118326	26.118326 26.209029	26.209029 26.345083	26.345083 26.481138	26.481138 26.617192	26.617192 26.753247	26.753247 26.843950	26.843950 26.980004	26.980004 27.342816	27.342816 27.750979	27.750979 28.113791	28.113791 28.431251	28.431251 28.748711	28.748711 29.156875	29.156875 29.474335	29.474335 29.610389	29.610389 29.746444	29.746444 29.882498	29.882498 30.018553	30.018553 30.426716	30.426716 30.834879	30.834879 30.970934	30.970934 31.333745	31.333745 31.696557	31.696557 32.104720	32.104720 32.467532	32.467532 32.648938	32.648938 32.739641	32.739641 32.921047	32.921047 33.057101	33.057101 33.465265	33.465265 33.918779	33.918779 34.054834	34.054834 34.190888	34.190888 34.508349	34.508349 34.871160	34.871160 35.233972	35.233972 35.370027	35.370027 35.506081	35.506081 35.868893	35.868893 36.277056	36.277056 36.685219	36.685219 37.093383	37.093383 37.274789	37.274789 37.410843	37.410843 37.546897	37.546897 37.728303	37.728303 37.864358	37.864358 38.272521	38.272521 38.408575	38.408575 38.544630	38.544630 38.862090	38.862090 39.224902	39.224902 39.360956	39.360956 39.497011	39.497011 39.859823	39.859823 40.177283	40.177283 40.313337	40.313337 40.449392	40.449392 40.721501	40.721501 41.265718	41.265718 41.447124	41.447124 41.583179	41.583179 41.764584	41.764584 42.172748	42.172748 42.626262	42.626262 42.989074	42.989074 43.261183	43.261183 43.487940	43.487940 43.896104	43.896104 44.032158	44.032158 44.394970	44.394970 44.848485	44.848485 44.984539	44.984539 45.120593	45.120593 45.483405	45.483405 45.936920	45.936920 46.072974	46.072974 46.254380	46.254380 46.390435	46.390435 46.617192	46.617192 46.934652	46.934652 47.342816	47.342816 47.569573	47.569573 47.705628	47.705628 47.841682	47.841682 48.023088	48.023088 48.431251	48.431251 48.884766	48.884766 49.247578	49.247578 49.428984	49.428984 49.610389	49.610389 49.746444	49.746444 50.063904	50.063904 50.472067	50.472067 50.880231	50.880231 51.061637	51.061637 51.333745	51.333745 51.469800	51.469800 51.605854	51.605854 51.787260	51.787260 51.923315	51.923315 52.150072	52.150072 52.648938	52.648938 52.784993	52.784993 52.966398	52.966398 53.193156	53.193156 53.692022	53.692022 54.145537	54.145537 54.281591	54.281591 54.462997	54.462997 54.689754	54.689754 55.596784	55.596784 56.050299	56.050299 56.503813	56.503813 56.639868	56.639868 56.821274	56.821274 57.456194	57.456194 57.773655	57.773655 57.955061	57.955061 58.136467	58.136467 58.272521	58.272521 58.771387	58.771387 58.952793	58.952793 59.088847	59.088847 59.406308	59.406308 59.950525	59.950525 60.358689	60.358689 60.812203	60.812203 61.175015	61.175015 61.628530	61.628530 61.764584	61.764584 61.855287	61.855287 61.991342	61.991342 62.127396	62.127396 62.263451	62.263451 62.399505	62.399505 62.535559	62.535559 62.716965	62.716965 62.853020	62.853020 62.989074	62.989074 63.125129	63.125129 63.261183	63.261183 63.397237	63.397237 63.533292	63.533292 63.714698	63.714698 63.850752	63.850752 63.986807	63.986807 64.122861	64.122861 64.304267	64.304267 64.440321	64.440321 64.939188	64.939188 65.075242	65.075242 65.211296	65.211296 65.392702	65.392702 65.800866	65.800866 66.209029	66.209029 66.617192	66.617192 67.070707	67.070707 67.206761	67.206761 67.388167	67.388167 67.524222	67.524222 67.750979	67.750979 68.204494	68.204494 68.340548	68.340548 68.567306	68.567306 68.794063	68.794063 69.020820	69.020820 69.247578	69.247578 69.610389	69.610389 69.746444	69.746444"
// // let songData = rawData.match(/\d+/g).map(str => parseInt(str, 10));


// const songData = [2.358277, 5.442177, 6.167800, 6.893424, 7.800454, 8.480726, 10.113379, 10.839002, 11.564626, 14.648526, 16.145125, 17.687075, 18.866213, 20.181406, 21.043084, 22.448980, 24.531024, 24.610693, 24.848485, 24.928154, 25.211296, 25.290965, 25.574108, 25.800866, 25.982271, 26.118326, 26.209029, 26.345083, 26.481138, 26.617192, 26.753247, 26.843950, 26.980004, 27.342816, 27.750979, 28.113791, 28.431251, 28.748711, 29.156875, 29.474335, 29.610389, 29.746444, 29.882498, 30.018553, 30.426716, 30.834879, 30.970934, 31.333745, 31.696557, 32.104720, 32.467532, 32.648938, 32.739641, 32.921047, 33.057101, 33.465265, 33.918779, 34.054834, 34.190888, 34.508349, 34.871160, 35.233972, 35.370027, 35.506081, 35.868893, 36.277056, 36.685219, 37.093383, 37.274789, 37.410843, 37.546897, 37.728303, 37.864358, 38.272521, 38.408575, 38.544630, 38.862090, 39.224902, 39.360956, 39.497011, 39.859823, 40.177283, 40.313337, 40.449392, 40.721501, 41.265718, 41.447124, 41.583179, 41.764584, 42.172748, 42.626262, 42.989074, 43.261183, 43.487940, 43.896104, 44.032158, 44.394970, 44.848485, 44.984539, 45.120593, 45.483405, 45.936920, 46.072974, 46.254380, 46.390435, 46.617192, 46.934652, 47.342816, 47.569573, 47.705628, 47.841682, 48.023088, 48.431251, 48.884766, 49.247578, 49.428984, 49.610389, 50.063904, 50.472067, 50.880231, 51.061637, 51.333745, 51.469800, 51.605854, 51.787260, 51.923315, 52.150072, 52.648938, 52.784993, 52.966398, 53.193156, 53.692022, 54.145537, 54.281591, 54.462997, 54.689754, 55.596784, 56.050299, 56.503813, 56.639868, 56.821274, 57.456194, 57.773655, 57.955061, 58.136467, 58.272521, 58.771387, 58.952793, 59.088847, 59.406308, 59.950525, 60.358689, 60.812203, 61.175015, 61.628530, 61.764584, 61.855287, 61.991342, 62.127396, 62.263451, 62.399505, 62.535559, 62.716965, 62.853020, 62.989074, 63.125129, 63.261183, 63.397237, 63.533292, 63.714698, 63.850752, 63.986807, 64.122861, 64.304267, 64.440321, 64.939188, 65.075242, 65.211296, 65.392702, 65.800866, 66.209029, 66.617192, 67.070707, 67.206761, 67.388167, 67.524222, 67.750979, 68.204494, 68.340548, 68.567306, 68.794063, 69.020820, 69.247578, 69.610389, 69.746444.]
// let songTemplate = [];
// const gameSpeed = 12;
// const drumCircleX = 412 / 2;
// const drumCircleY = 915 - 30;
// let score = 0;
// let drumSound, song;
// let songTime = 0;
// let lastNoteTime = 0;
// let objectY = 15;
// const noteInterval = 100;
// let songSeconds = [];

// function preload() {
//   soundFormats('mp3', 'ogg');
//   drumSound = loadSound('assets/don');
//   song = loadSound('assets/dejavu');
// }

// function setup() {
//   createCanvas(412, 915);
//   textSize(24);

//   const songDuration = song.duration()*10
//   console.log(song.duration());
//   let songDuration2 = parseInt(songDuration);
//   songSeconds = new Array(songDuration2).fill(0);

//   for (let j = 0; j < songData.length; j++) {
//     let beat = songData[j] * 10;
//     let finalBeat = parseInt(beat);
    
//     if (finalBeat < songSeconds.length) {
//       songSeconds[finalBeat] = 1;
//     }

//     // console.log(finalBeat);
//   }
// }

// function draw() {

//   console.log(songData);

//   background('white');
//   // songMaker();
//   strokeWeight(4);
//   fill('white');
//   ellipse(width / 2, height - 50, 100);
//   ellipse(width / 2, height - 50, accelerationX * 1.5);

//   for (let i = 0; i < songSeconds.length; i++) {
//     if (song.isPlaying() != true) {
//       song.play();
//     }
//     const tile = new Tile(songSeconds[i], objectY + -i * 60 + 15);
//     tile.draw();

//     if (accelerationX > 10 || accelerationY > 10 || accelerationZ > 10 || keyIsPressed) {
//       score += calculateScore(tile, 1, i);
//       if (drumSound.isPlaying() != true) {
//         drumSound.play();
//       }
//       // accelerationX = 0;

//     } else if (score == 1000000) {
//       score += calculateScore(tile, 2, i);
//     }
//   }

//   objectY += gameSpeed;

//   text('Score: ' + score, 50, height - 100);
// }

// function calculateScore(tile, move, index) {
//   const tileType = tile.type;
//   const tileVel = tile.velocity;
//   let scoreResult = 0;

//   let distance = Math.sqrt(Math.pow(tileVel - drumCircleY, 2));
//   let maxDistance = 40;

//   if (tileType == move && distance < maxDistance) {
//     songSeconds[index] = 0;
//     scoreResult = Math.max(maxDistance - distance);
//   } else {
//     scoreResult -= 0;
//   }

//   return scoreResult;
// }

// class Tile {
//   constructor(type, velocity) {
//     this.type = type;
//     this.velocity = velocity;
//   }

//   draw() {
//     switch (this.type) {
//       case 0:
//         break;
//       case 1:
//         fill('red');
//         ellipse(width / 2, this.velocity, 60, 60);
//         break;
//       case 2:
//         fill('blue');
//         ellipse(width / 2, this.velocity, 60, 60);
//         break;
//     }
//   }
// }